

### High-Level Design (HLD)

**Objective:** Create REST APIs to add/create and delete entries based on the provided JSON request, and update an `enroll_log` table accordingly.

#### Components:
1. **API Layer:** Spring Boot REST Controller to handle incoming HTTP requests.
2. **Service Layer:** Business logic to process the requests.
3. **Repository Layer:** Interaction with the database using Spring Data JPA.
4. **Database:** Tables `enroll` and `enroll_log`.

#### Database Schema:
- **enroll** table:
  - `id` (Long, Primary Key)
  - `bnNumber` (int)
  - `crnName` (String)
  - `serviceName` (String)

- **enroll_log** table:
  - `logId` (Long, Primary Key)
  - `bnNumber` (int)
  - `crnName` (String)
  - `serviceName` (String)
  - `operationStatus` (String, e.g., "ADD", "DELETE")

### OpenAPI Specification (OAS)

```yaml
openapi: 3.0.1
info:
  title: Enroll Service API
  description: API for adding/creating and deleting enrollments
  version: 1.0.0
paths:
  /api/enroll:
    post:
      summary: Add or create an enrollment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bnNumber:
                  type: integer
                crnName:
                  type: string
                serviceName:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Operation successful
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/enroll:
    delete:
      summary: Delete an enrollment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bnNumber:
                  type: integer
                crnName:
                  type: string
      responses:
        '200':
          description: Operation successful
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
```

### Sequence Diagram (PlantUML)

#### Add/Create Enrollment

```plantuml
@startuml
actor User
participant "EnrollController" as API
participant "EnrollService" as Service
participant "EnrollRepository" as EnrollRepo
participant "EnrollLogRepository" as LogRepo
database "Database" as DB

User -> API : POST /api/enroll
API -> Service : processAddRequest(request)
Service -> EnrollRepo : findByBnNumberAndCrnName(request.getBnNumber(), request.getCrnName())
EnrollRepo -> DB : SELECT * FROM enroll WHERE bnNumber=:bnNumber AND crnName=:crnName
DB --> EnrollRepo : EnrollRecord
EnrollRepo --> Service : EnrollRecord
alt EnrollRecord not found
    Service -> EnrollRepo : save(new Enroll(request.getBnNumber(), request.getCrnName(), request.getServiceName()))
    EnrollRepo -> DB : INSERT INTO enroll ...
    DB --> EnrollRepo : InsertSuccess
    EnrollRepo --> Service : InsertSuccess
    Service -> LogRepo : save(new EnrollLog(newEnroll.getBnNumber(), newEnroll.getCrnName(), newEnroll.getServiceName(), "ADD"))
    LogRepo -> DB : INSERT INTO enroll_log ...
    DB --> LogRepo : InsertSuccess
    LogRepo --> Service : InsertSuccess
    Service -> API : successResponse()
    API -> User : 200 OK
else EnrollRecord found
    Service -> API : errorResponse("Enroll record already exists")
    API -> User : 400 Bad Request
end
@enduml
```

#### Delete Enrollment

```plantuml
@startuml
actor User
participant "EnrollController" as API
participant "EnrollService" as Service
participant "EnrollRepository" as EnrollRepo
participant "EnrollLogRepository" as LogRepo
database "Database" as DB

User -> API : DELETE /api/enroll
API -> Service : processDeleteRequest(request)
Service -> EnrollRepo : findByBnNumberAndCrnName(request.getBnNumber(), request.getCrnName())
EnrollRepo -> DB : SELECT * FROM enroll WHERE bnNumber=:bnNumber AND crnName=:crnName
DB --> EnrollRepo : EnrollRecord
EnrollRepo --> Service : EnrollRecord
alt EnrollRecord found
    Service -> EnrollRepo : delete(enroll)
    EnrollRepo -> DB : DELETE FROM enroll WHERE bnNumber=:bnNumber AND crnName=:crnName
    DB --> EnrollRepo : DeleteSuccess
    EnrollRepo --> Service : DeleteSuccess
    Service -> LogRepo : save(new EnrollLog(enroll.getBnNumber(), enroll.getCrnName(), enroll.getServiceName(), "DELETE"))
    LogRepo -> DB : INSERT INTO enroll_log ...
    DB --> LogRepo : InsertSuccess
    LogRepo --> Service : InsertSuccess
    Service -> API : successResponse()
    API -> User : 200 OK
else EnrollRecord not found
    Service -> API : errorResponse("Enroll record not found")
    API -> User : 400 Bad Request
end
@enduml
```

### Low-Level Design (LLD)

#### 1. API Layer (Controller)

```java
@RestController
@RequestMapping("/api")
public class EnrollController {

    @Autowired
    private EnrollService enrollService;

    @PostMapping("/enroll")
    public ResponseEntity<Map<String, String>> addEnroll(@RequestBody EnrollRequest request) {
        try {
            enrollService.processAddRequest(request);
            return new ResponseEntity<>(Map.of("message", "Operation successful"), HttpStatus.OK);
        } catch (EnrollAlreadyExistsException e) {
            return new ResponseEntity<>(Map.of("error", "Enroll record already exists"), HttpStatus.BAD_REQUEST);
        } catch (Exception e) {
            return new ResponseEntity<>(Map.of("error", "Internal Server Error"), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @DeleteMapping("/enroll")
    public ResponseEntity<Map<String, String>> deleteEnroll(@RequestBody EnrollRequest request) {
        try {
            enrollService.processDeleteRequest(request);
            return new ResponseEntity<>(Map.of("message", "Operation successful"), HttpStatus.OK);
        } catch (EnrollNotFoundException e) {
            return new ResponseEntity<>(Map.of("error", "Enroll record not found"), HttpStatus.BAD_REQUEST);
        } catch (Exception e) {
            return new ResponseEntity<>(Map.of("error", "Internal Server Error"), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
```

#### 2. Service Layer

```java
@Service
public class EnrollService {

    @Autowired
    private EnrollRepository enrollRepository;

    @Autowired
    private EnrollLogRepository enrollLogRepository;

    public void processAddRequest(EnrollRequest request) throws EnrollAlreadyExistsException {
        Optional<Enroll> enrollOpt = enrollRepository.findByBnNumberAndCrnName(request.getBnNumber(), request.getCrnName());
        if (enrollOpt.isPresent()) {
            throw new EnrollAlreadyExistsException("Enroll record already exists");
        } else {
            Enroll newEnroll = new Enroll(request.getBnNumber(), request.getCrnName(), String.join(",", request.getServiceName()));
            enrollRepository.save(newEnroll);
            EnrollLog enrollLog = new EnrollLog(newEnroll.getBnNumber(), newEnroll.getCrnName(), newEnroll.getServiceName(), "ADD");
            enrollLogRepository.save(enrollLog);
        }
    }

    public void processDeleteRequest(EnrollRequest request) throws EnrollNotFoundException {
        Optional<Enroll> enrollOpt = enrollRepository.findByBnNumberAndCrnName(request.getBnNumber(), request.getCrnName());
        if (enrollOpt.isPresent()) {
            Enroll enroll = enrollOpt.get();
            enrollRepository.delete(enroll);
            EnrollLog enrollLog = new EnrollLog(enroll.getBnNumber(), enroll.getCrnName(), enroll.getServiceName(), "DELETE");
            enrollLogRepository.save(enrollLog);
        } else {
            throw new EnrollNotFoundException("Enroll record not found");
        }
    }
}
```

#### 3. Repository Layer

```java
public interface EnrollRepository extends JpaRepository<Enroll, Long> {
    Optional<Enroll> findByBnNumberAndCrnName(int bnNumber, String crnName);
}

public interface EnrollLogRepository extends JpaRepository<EnrollLog, Long> {}
```

#### 4. Database Entities

```java
@Entity
public class Enroll {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private int bnNumber;
    private String crnName;
    private String serviceName;

    public Enroll(int bnNumber, String crnName, String serviceName) {
        this.bnNumber = bnNumber;
        this.crnName = crnName;
        this.serviceName = serviceName;




### High-Level Design (HLD)

**Objective:** Develop two REST APIs for adding/creating and deleting entries in an `enroll` table, and log these operations in an `enroll_log` table.

#### Components:

1. **API Layer (Controller):**
   - Endpoints: 
     - `POST /api/enroll` for adding or creating an enrollment.
     - `DELETE /api/enroll` for deleting an enrollment.
   - Validates incoming requests and forwards them to the service layer.
   - Handles exceptions and sends appropriate HTTP responses.

2. **Service Layer:**
   - Business logic for processing add/create and delete requests.
   - Interacts with the repository layer to fetch, save, and delete records.
   - Logs operations in the `enroll_log` table.
   - Exception handling for cases like record not found or record already existing.

3. **Repository Layer:**
   - Interfaces for data access:
     - `EnrollRepository`: Handles CRUD operations for the `enroll` table.
     - `EnrollLogRepository`: Handles CRUD operations for the `enroll_log` table.
   - Uses Spring Data JPA for database interactions.

4. **Database:**
   - **Tables:**
     - `enroll`:
       - `id` (Primary Key)
       - `bnNumber` (int)
       - `crnName` (String)
       - `serviceName` (String)
     - `enroll_log`:
       - `logId` (Primary Key)
       - `bnNumber` (int)
       - `crnName` (String)
       - `serviceName` (String)
       - `operationStatus` (String, e.g., "ADD", "DELETE")

### Sequence Diagrams

#### Add/Create Enrollment

1. **User sends a POST request to `/api/enroll` with the enrollment details.**
2. **API Layer:** The `EnrollController` receives the request and calls the `EnrollService`.
3. **Service Layer:** The `EnrollService` checks if the enrollment already exists using the `EnrollRepository`.
   - If the enrollment exists, it throws an `EnrollAlreadyExistsException`.
   - If the enrollment does not exist, it creates a new enrollment record and saves it.
   - It also creates an entry in the `enroll_log` table with the status "ADD".
4. **API Layer:** The `EnrollController` returns the appropriate response based on the outcome (200 OK for success, 400 Bad Request for existing record).

#### Delete Enrollment

1. **User sends a DELETE request to `/api/enroll` with the enrollment details.**
2. **API Layer:** The `EnrollController` receives the request and calls the `EnrollService`.
3. **Service Layer:** The `EnrollService` checks if the enrollment exists using the `EnrollRepository`.
   - If the enrollment does not exist, it throws an `EnrollNotFoundException`.
   - If the enrollment exists, it deletes the enrollment record.
   - It also creates an entry in the `enroll_log` table with the status "DELETE".
4. **API Layer:** The `EnrollController` returns the appropriate response based on the outcome (200 OK for success, 400 Bad Request for record not found).

### Low-Level Design (LLD)

#### API Layer (Controller):

- **Endpoints:**
  - `POST /api/enroll`: 
    - Request Body: 
      ```json
      {
        "bnNumber": 124,
        "crnName": "US",
        "serviceName": ["OPT_IN", "TER_99"]
      }
      ```
    - Responses:
      - 200 OK: Operation successful.
      - 400 Bad Request: Enroll record already exists.
      - 500 Internal Server Error: General error handling.

  - `DELETE /api/enroll`: 
    - Request Body: 
      ```json
      {
        "bnNumber": 124,
        "crnName": "US"
      }
      ```
    - Responses:
      - 200 OK: Operation successful.
      - 400 Bad Request: Enroll record not found.
      - 500 Internal Server Error: General error handling.

#### Service Layer:

- **Methods:**
  - `processAddRequest(EnrollRequest request)`: 
    - Checks if the record exists in the `enroll` table.
    - Adds the new record if it doesn't exist.
    - Logs the operation in the `enroll_log` table.
  - `processDeleteRequest(EnrollRequest request)`:
    - Checks if the record exists in the `enroll` table.
    - Deletes the record if it exists.
    - Logs the operation in the `enroll_log` table.

#### Repository Layer:

- **Repositories:**
  - `EnrollRepository`: Interface for CRUD operations on the `enroll` table.
    - `Optional<Enroll> findByBnNumberAndCrnName(int bnNumber, String crnName)`
  - `EnrollLogRepository`: Interface for CRUD operations on the `enroll_log` table.

#### Database Entities:

- **Entities:**
  - `Enroll`: Represents the `enroll` table.
  - `EnrollLog`: Represents the `enroll_log` table.

#### Request and Exception Classes:

- **Request Class:**
  - `EnrollRequest`: Holds the request data for add/create and delete operations.
    - Fields: `bnNumber`, `crnName`, `serviceName` (for add/create).

- **Exception Classes:**
  - `EnrollAlreadyExistsException`: Thrown when an enrollment record already exists.
  - `EnrollNotFoundException`: Thrown when an enrollment record is not found.

### Summary

This design outlines a comprehensive yet optimal solution for managing enrollment records through REST APIs. The HLD provides a clear overview of the system components and their interactions, while the LLD specifies detailed designs for the API, service, and repository layers, as well as the database schema and related entities. This ensures a well-structured and maintainable implementation.