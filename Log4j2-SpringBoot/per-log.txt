# Define the custom appender
appender.HttpRequestResponseAppender.type = Async
appender.HttpRequestResponseAppender.name = HttpRequestResponseAppender
appender.HttpRequestResponseAppender.layout.type = PatternLayout
appender.HttpRequestResponseAppender.layout.pattern = %d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n

# Async appender configuration
appender.AsyncAppender.name = AsyncAppender
appender.AsyncAppender.layout.type = PatternLayout
appender.AsyncAppender.layout.pattern = %d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n


# Console appender configuration
appender.Console.type = Console
appender.Console.name = CONSOLE
appender.Console.layout.type = PatternLayout
appender.Console.layout.pattern = %d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n

# Root logger configuration
rootLogger.level = debug
rootLogger.appenderRef.HttpRequestResponseAppender.ref = HttpRequestResponseAppender

====

# Console appender configuration
appender.Console.type = Console
appender.Console.name = CONSOLE
appender.Console.layout.type = PatternLayout
appender.Console.layout.pattern = %d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n

# Define the custom appender
appender.HttpRequestResponseAppender.type = org.apache.logging.log4j.core.appender.AsyncAppender
appender.HttpRequestResponseAppender.name = Async
appender.HttpRequestResponseAppender.appenderRefs = HttpRequestResponseAppender
appender.HttpRequestResponseAppender.bufferSize = 1024

# Define the custom layout for HttpRequestResponseAppender
appender.HttpRequestResponseAppender.layout.type = PatternLayout
appender.HttpRequestResponseAppender.layout.pattern = %d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n

# Actual appender
appender.HttpRequestResponseAppender.appender.HttpRequestResponseAppender.type = HttpRequestResponseAppender

# Root logger configuration
rootLogger.level = debug
rootLogger.appenderRef.Async.ref = HttpRequestResponseAppender
===

# Root logger
status = error
name = PropertiesConfig

# Console appender configuration
appender.Console.type = Console
appender.Console.name = CONSOLE
appender.Console.layout.type = PatternLayout
appender.Console.layout.pattern = %d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n

# Define the custom appender
appender.HttpRequestResponseAppender.type = org.apache.logging.log4j.core.appender.AsyncAppender
appender.HttpRequestResponseAppender.name = Async
appender.HttpRequestResponseAppender.appenderRefs = HttpRequestResponseAppender
appender.HttpRequestResponseAppender.bufferSize = 1024

# Define the custom layout for HttpRequestResponseAppender
appender.HttpRequestResponseAppender.layout.type = PatternLayout
appender.HttpRequestResponseAppender.layout.pattern = %d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n

# Actual appender
appender.HttpRequestResponseAppender.appender.HttpRequestResponseAppender.type = HttpRequestResponseAppender

# Root logger configuration
rootLogger.level = debug
rootLogger.appenderRef.Async.ref = HttpRequestResponseAppender


import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.core.Appender;
import org.apache.logging.log4j.core.Layout;
import org.apache.logging.log4j.core.LogEvent;
import org.apache.logging.log4j.core.appender.AbstractAppender;
import org.apache.logging.log4j.core.config.plugins.Plugin;
import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
import org.apache.logging.log4j.core.config.plugins.PluginElement;
import org.apache.logging.log4j.core.config.plugins.PluginFactory;
import org.apache.logging.log4j.core.layout.PatternLayout;

@Plugin(name = "HttpRequestResponseAppender", category = "Core", elementType = Appender.ELEMENT_TYPE)
public class HttpRequestResponseAppender extends AbstractAppender {

    private HttpRequestResponseAppender(String name, Layout<?> layout) {
        super(name, null, layout, true);
    }

    @Override
    public void append(LogEvent event) {
        if (event.getMessage().getFormattedMessage().contains("HTTP request")) {
            // Extract and log HTTP request payload
            String requestPayload = event.getMessage().getFormattedMessage();
            logPayload(requestPayload);
        } else if (event.getMessage().getFormattedMessage().contains("HTTP response")) {
            // Extract and log HTTP response payload
            String responsePayload = event.getMessage().getFormattedMessage();
            logPayload(responsePayload);
        }
    }

    private void logPayload(String payload) {
        // Use the Log4j2 logger to log the payload
        getLogger().log(Level.INFO, payload);
    }

    @PluginFactory
    public static HttpRequestResponseAppender createAppender(
            @PluginAttribute("name") String name,
            @PluginElement("Layout") Layout<?> layout) {
        if (name == null) {
            getLogger().error("No name provided for HttpRequestResponseAppender");
            return null;
        }
        if (layout == null) {
            layout = PatternLayout.createDefaultLayout();
        }
        return new HttpRequestResponseAppender(name, layout);
    }
}



import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
import org.springframework.web.util.ContentCachingRequestWrapper;
import org.springframework.web.util.ContentCachingResponseWrapper;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@Component
@Order(1)
public class RequestResponseLoggingFilter implements Filter {

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        // Wrap the request and response to capture the payloads
        ContentCachingRequestWrapper requestWrapper = new ContentCachingRequestWrapper((HttpServletRequest) request);
        ContentCachingResponseWrapper responseWrapper = new ContentCachingResponseWrapper((HttpServletResponse) response);

        // Log request information
        logRequest(requestWrapper);

        // Continue with the filter chain
        chain.doFilter(requestWrapper, responseWrapper);

        // Log response information
        logResponse(responseWrapper);

        // Forward the response to the original response
        responseWrapper.copyBodyToResponse();
    }

    private void logRequest(ContentCachingRequestWrapper request) {
        // Log request information using the custom Log4j2 appender
        String logMessage = "HTTP request received: URI=" + request.getRequestURI() + ", Method=" + request.getMethod();
        HttpRequestResponseAppender.logPayload(logMessage);
    }

    private void logResponse(ContentCachingResponseWrapper response) {
        // Log response information using the custom Log4j2 appender
        String logMessage = "HTTP response sent with status: " + response.getStatus();
        HttpRequestResponseAppender.logPayload(logMessage);
    }

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        // Initialization code (if needed)
    }

    @Override
    public void destroy() {
        // Cleanup code (if needed)
    }
}


getting error 023-11-16 14:34:37,317 main ERROR No appender references provided to AsyncAppender: appenderRefs

2023-11-16 14:34:37,332 main ERROR Could not create plugin of type class org.apache.logging.log4j.core.appender.AsyncAppender for element Async org.apache.logging.log4j.core.config.ConfigurationException: Arguments given for element Async are invalid: field 'appenderRefs' has invalid value

[Lorg.apache.logging.log4j.core.config.AppenderRef: @7c0c77c7'

at org.apache.logging.log4j.core.config.plugins.util.PluginBuilder.injectFields (PluginBuilder.java:212)

at org.apache.logging.log4j.core.config.plugins.util.PluginBuilder.build (PluginBuilder.java:123) at org.apache.logging.log4j.core.config.AbstractConfiguration.createPluginobject (AbstractConfiguration.java:1122)

at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration (AbstractConfiguration.java:1047) at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration (AbstractConfiguration.java:1039)

at org.apache.logging.log4j.core.config.AbstractConfiguration.doConfigure (AbstractConfiguration.java:651) at org.apache.logging.log4j.core.config.AbstractConfiguration.initialize (AbstractConfiguration.java:249)

at org.apache.logging.log4j.core.config.AbstractConfiguration.start (AbstractConfiguration.java:295)

at org.apache.logging.log4j.core.LoggerContext.setConfiguration (LoggerContext.java:621)

at org.apache.logging.log4j.core.LoggerContext.reconfigure (LoggerContext.java:694) at org.apache.logging.log4j.core.LoggerContext.reconfigure (LoggerContext.java:711)

at org.apache.logging.log4j.core.LoggerContext.start (LoggerContext.java:253)

at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext (Log4jContextFactory.java:155) at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext (Log4jContextFactory.java:47)

at org.apache.logging.log4j.LogManager.getContext (LogManager.java:196) at org.apache.commons.logging.LogAdapter$Log4jLog.<clinit>(LogAdapter.java:155)

at org.apache.commons.logging.LogAdapter$Log4jAdapter.createLog (LogAdapter.java:122)

at org.apache.commons.logging. LogAdapter.createLog(LogAdapter.java:89) at org.apache.commons.logging.LogFactory.getLog (LogFactory.java:67)

at org.apache.commons.logging.LogFactory.getLog (LogFactory.java:59)

at org.springframework.boot.SpringApplication.<clinit>(SpringApplication.java:179)

at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

at java.lang.reflect.Method.invoke(Method.java:498)

at com.intellij.rt.execution.CommandLineWrapper.main (CommandLineWrapper.java:64)

2023-11-16 14:34:37,335 main ERROR Null object returned for Async in Appenders.

2023-11-16 14:34:37,335 main ERROR Unable to locate appender "HttpRequestResponseAppender" for logger config "root"

2023-11-16 14:34:38,631 main ERROR No appender references provided to AsyncAppender: appenderRefs

2023-11-16 14:34:38,632 main ERROR Could not create plugin of type class org.apache.logging.log4j.core.appender.AsyncAppender for element Async