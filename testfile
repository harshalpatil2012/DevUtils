When building a proxy gateway application in Spring Boot with WebClient for API calls, you should consider implementing various security measures, including OWASP recommendations and other filters to enhance the security of your application. Here's a list of some key security measures and filters you should consider:

1. **Authentication and Authorization**:
   - Implement user authentication using Spring Security.
   - Configure role-based or permission-based authorization.

2. **Input Validation**:
   - Implement input validation to prevent SQL injection, XSS, and other injection attacks.

3. **Rate Limiting**:
   - Implement rate limiting to protect against API abuse or DDoS attacks.

4. **Cross-Origin Resource Sharing (CORS)**:
   - Configure CORS settings to control which domains can access your proxy.

5. **Content Security Policy (CSP)**:
   - Implement CSP headers to prevent XSS attacks by controlling which scripts can be executed on your pages.

6. **HTTP Security Headers**:
   - Set security headers like X-Content-Type-Options, X-Frame-Options, and X-XSS-Protection.

7. **Logging and Monitoring**:
   - Implement comprehensive logging to detect and investigate security incidents.
   - Set up monitoring and alerting for suspicious activities.

8. **SSL/TLS Configuration**:
   - Ensure your application uses HTTPS with proper SSL/TLS configuration.

9. **API Request Validation**:
   - Validate incoming API requests for correctness and adherence to expected formats.

10. **Request and Response Filtering**:
    - Use Spring's WebFilters or AOP to filter and sanitize incoming and outgoing data.

11. **OWASP Top Ten**:
    - Address common vulnerabilities like Injection, Broken Authentication, Sensitive Data Exposure, XML External Entity (XXE), and more as per the OWASP Top Ten list.

12. **CSRF Protection**:
    - Implement CSRF protection mechanisms to prevent cross-site request forgery attacks.

13. **Input and Output Encoding**:
    - Encode and decode input and output data properly to prevent injection attacks.

14. **Error Handling**:
    - Handle errors gracefully without exposing sensitive information.

15. **Secure Configuration**:
    - Store sensitive configuration properties securely, such as API keys or secrets.

16. **Secure API Keys and Secrets**:
    - Protect API keys and secrets using environment variables or a secret management tool.

17. **Security Headers**:
    - Add security headers like Strict-Transport-Security (HSTS) and Content-Security-Policy (CSP) to HTTP responses.

18. **Security Testing**:
    - Regularly perform security testing, including penetration testing and vulnerability scanning.

19. **Dependency Scanning**:
    - Regularly update and scan your project's dependencies for known vulnerabilities.

20. **API Rate Limiting**:
    - Implement rate limiting to protect your backend services from excessive requests.

Remember that security is an ongoing process, and you should stay updated with the latest security best practices and vulnerabilities to adapt your application's security measures accordingly. Additionally, consider using Spring Cloud Gateway as it provides built-in features for building API gateways in a Spring Boot application.
