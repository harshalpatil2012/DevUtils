noimport org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class SizeLoggingInterceptor implements HandlerInterceptor {

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
                           ModelAndView modelAndView) {
        long responseSize = response.getHeader("Content-Length") != null ?
                Long.parseLong(response.getHeader("Content-Length")) : 0;
        double sizeInKB = responseSize / 1024.0;
        System.out.println("Response size: " + sizeInKB + " KB");
    }
}


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Bean
    public SizeLoggingInterceptor sizeLoggingInterceptor() {
        return new SizeLoggingInterceptor();
    }

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(sizeLoggingInterceptor());
    }
}


for webclient

8ponseSize = clientResponse.headers().contentLength();
            double sizeInKB = responseSize / 1024.0;
            logger.info("Response size: {} KB", sizeInKB);

            // Log additional response details
            HttpHeaders headers = clientResponse.headers().asHttpHeaders();
            headers.forEach((name, values) ->
                    values.forEach(value -> logger.info("Response Header - {} : {}", name, value)));

            return Mono.just(clientResponse);
        });
    }
}



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpHeaders;
import org.springframework.web.reactive.function.client.ExchangeFilterFunction;
import org.springframework.web.reactive.function.client.WebClient;

@Configuration
public class WebClientConfig {

    private final Logger logger = LoggerFactory.getLogger(WebClientConfig.class);

    @Bean
    public WebClient.Builder webClientBuilder() {
        return WebClient.builder()
                .filter(logRequest())
                .filter(logResponseDetails());
    }

    private ExchangeFilterFunction logRequest() {
        return ExchangeFilterFunction.ofRequestProcessor(clientRequest -> {
            // Capture the request URL before making the actual request
            logger.info("Request: {} {}", clientRequest.method(), clientRequest.url());
            clientRequest.headers().forEach((name, values) ->
                    values.forEach(value -> logger.info("{}={}", name, value)));
            return Mono.just(clientRequest);
        });
    }

    private ExchangeFilterFunction logResponseDetails() {
        return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {
            // Log the response size with 3 decimal places
            long responseSize = clientResponse.headers().contentLength();
            double sizeInKB = responseSize / 1024.0;
            String formattedSize = String.format("%.3f", sizeInKB);
            logger.info("Response size: {} KB", formattedSize);

            // Log additional response details
            HttpHeaders headers = clientResponse.headers().asHttpHeaders();
            headers.forEach((name, values) ->
                    values.forEach(value -> logger.info("Response Header - {} : {}", name, value)));

            return Mono.just(clientResponse);
        });
    }
}
