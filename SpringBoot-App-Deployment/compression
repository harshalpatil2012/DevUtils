import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.reactive.function.client.WebClient;

import static org.mockito.Mockito.*;
import static org.mockito.ArgumentMatchers.any;
import static org.assertj.core.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class WebClientConfigTests {

    @Mock
    private WebClient.Builder builder;

    @Mock
    private WebClient webClient;

    @Mock
    private HttpClient httpClient;

    @InjectMocks
    private WebClientConfig webClientConfig;

    @BeforeEach
    void setUp() {
        // Setup the builder to return itself when filter and other methods are called
        when(builder.filter(any())).thenReturn(builder);
        when(builder.clientConnector(any())).thenReturn(builder);
        when(builder.build()).thenReturn(webClient);  // Return the mocked WebClient instead of calling WebClient.builder().build()

        // Assume WebClientConfig is properly modified to not use real HttpClient in the constructor if that's part of the problem
    }

    @Test
    void testWebClientIsProperlyConfigured() {
        WebClient client = webClientConfig.webClient();
        assertNotNull(client);

        // Verify that the WebClient.Builder methods are called correctly
        verify(builder).filter(any());
        verify(builder).clientConnector(any());
        verify(builder).build();
    }
}
