pipeline {
    agent any
    
    options {
        timeout(time: 15, unit: 'MINUTES')
        timestamps()
    }
    
    properties([
        parameters([
            choice(name: 'SERVICE', choices: ['ServiceA', 'ServiceB'], description: 'Select the service to call'),
            string(name: 'NUMBER', trim: true, description: 'Enter a number'),
            string(name: 'COUNTRY', trim: true, description: 'Enter a country'),
            string(name: 'FEATURE', trim: true, description: 'Enter a feature'),
            string(name: 'EXTRA_PARAM', trim: true, description: 'Extra parameter for ServiceB (required only for ServiceB)')
        ])
    ])
    
    stages {
        stage('Print Inputs') {
            steps {
                script {
                    echo "Job started with the following inputs:"
                    echo "SERVICE: ${params.SERVICE}"
                    echo "NUMBER: ${params.NUMBER}"
                    echo "COUNTRY: ${params.COUNTRY}"
                    echo "FEATURE: ${params.FEATURE}"
                    echo "EXTRA_PARAM: ${params.EXTRA_PARAM}"
                }
            }
        }

        stage('Validate Input') {
            steps {
                script {
                    echo "Starting input validation..."
                    def validationErrors = []
                    
                    if (!params.NUMBER) validationErrors.add("NUMBER must be filled")
                    if (!params.COUNTRY) validationErrors.add("COUNTRY must be filled")
                    if (!params.FEATURE) validationErrors.add("FEATURE must be filled")
                    if (params.SERVICE == 'ServiceB' && !params.EXTRA_PARAM) {
                        validationErrors.add("EXTRA_PARAM is required for ServiceB")
                    }
                    
                    if (validationErrors.size() > 0) {
                        echo "Validation Errors found:"
                        validationErrors.each { error ->
                            echo "- ${error}"
                        }
                        currentBuild.result = 'FAILURE'
                        error "Input validation failed. Job will not proceed."
                    } else {
                        echo "All inputs are valid. Proceeding to next stage."
                    }
                }
            }
        }
        
        stage('Prepare API Call') {
            steps {
                script {
                    echo "Preparing API call..."
                    env.SERVICE_URL = params.SERVICE == 'ServiceA' ? 'http://serviceA.example.com/api' : 'http://serviceB.example.com/api'
                    echo "Service URL: ${env.SERVICE_URL}"
                    
                    env.CORRELATION_ID = UUID.randomUUID().toString()
                    echo "Generated Correlation ID: ${env.CORRELATION_ID}"
                    
                    if (params.SERVICE == 'ServiceA') {
                        env.REQUEST_BODY = """{"number": "${params.NUMBER}", "country": "${params.COUNTRY}", "feature": "${params.FEATURE}"}"""
                    } else {
                        env.REQUEST_BODY = """{"id": "${params.NUMBER}", "region": "${params.COUNTRY}", "capability": "${params.FEATURE}", "additionalInfo": "${params.EXTRA_PARAM}"}"""
                    }
                    echo "Prepared request body: ${env.REQUEST_BODY}"
                }
            }
        }
        
        stage('Make API Call') {
            steps {
                script {
                    echo "Making API call..."
                    def response
                    def statusCode
                    try {
                        timeout(time: 30, unit: 'SECONDS') {
                            response = sh(script: """
                                curl -s -w "\\n%{http_code}" -X POST \
                                -H "Content-Type: application/json" \
                                -H "X-Correlation-ID: ${env.CORRELATION_ID}" \
                                -d '${env.REQUEST_BODY}' \
                                ${env.SERVICE_URL}
                            """, returnStdout: true).trim()
                            
                            // The last line of the response is the status code
                            def responseLines = response.readLines()
                            statusCode = responseLines.last()
                            def responseBody = responseLines.dropRight(1).join("\n")
                            
                            echo "API call completed. Response status: ${statusCode}"
                            echo "Response body: ${responseBody}"
                            
                            if (statusCode != "201") {
                                error "API call failed with status code: ${statusCode}"
                            }
                        }
                    } catch (Exception e) {
                        echo "Exception occurred during API call:"
                        echo "Exception type: ${e.getClass().getName()}"
                        echo "Exception message: ${e.getMessage()}"
                        echo "Stack trace:"
                        e.printStackTrace()
                        error "API call failed due to exception. See above for details."
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "Job completed successfully"
        }
        failure {
            echo "Job failed. Please check the console output for details."
        }
        aborted {
            echo "Job was aborted"
        }
        always {
            echo "Job finished. Final status: ${currentBuild.result}"
        }
    }
}
```