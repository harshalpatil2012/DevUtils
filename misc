pipeline {
    agent any
    
    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
    }
    
    properties([
        parameters([
            choice(name: 'SERVICE', choices: ['ServiceA', 'ServiceB'], description: 'Select the service to call'),
            string(name: 'NUMBER', trim: true, description: 'Enter a number'),
            string(name: 'COUNTRY', trim: true, description: 'Enter a country'),
            string(name: 'FEATURE', trim: true, description: 'Enter a feature'),
            string(name: 'EXTRA_PARAM', trim: true, description: 'Extra parameter for ServiceB (required only for ServiceB)')
        ])
    ])
    
    stages {
        stage('Validate Input') {
            steps {
                script {
                    echo "Starting input validation..."
                    def validationErrors = []
                    
                    if (!params.NUMBER) validationErrors.add("NUMBER must be filled")
                    if (!params.COUNTRY) validationErrors.add("COUNTRY must be filled")
                    if (!params.FEATURE) validationErrors.add("FEATURE must be filled")
                    if (params.SERVICE == 'ServiceB' && !params.EXTRA_PARAM) {
                        validationErrors.add("EXTRA_PARAM is required for ServiceB")
                    }
                    
                    if (validationErrors.size() > 0) {
                        echo "Validation Errors found:"
                        validationErrors.each { error ->
                            echo "- ${error}"
                        }
                        currentBuild.result = 'FAILURE'
                        error "Input validation failed. Job will not proceed."
                    } else {
                        echo "All inputs are valid. Proceeding to next stage."
                    }
                }
            }
        }
        
        stage('Prepare API Call') {
            steps {
                script {
                    echo "Preparing API call..."
                    def serviceUrl = params.SERVICE == 'ServiceA' ? 'http://serviceA.example.com/api' : 'http://serviceB.example.com/api'
                    echo "Service URL: ${serviceUrl}"
                    
                    def correlationId = UUID.randomUUID().toString()
                    echo "Generated Correlation ID: ${correlationId}"
                    
                    def requestBody
                    if (params.SERVICE == 'ServiceA') {
                        requestBody = """{
                            "number": "${params.NUMBER}",
                            "country": "${params.COUNTRY}",
                            "feature": "${params.FEATURE}"
                        }"""
                    } else {
                        requestBody = """{
                            "id": "${params.NUMBER}",
                            "region": "${params.COUNTRY}",
                            "capability": "${params.FEATURE}",
                            "additionalInfo": "${params.EXTRA_PARAM}"
                        }"""
                    }
                    echo "Prepared request body: ${requestBody}"
                    
                    env.SERVICE_URL = serviceUrl
                    env.CORRELATION_ID = correlationId
                    env.REQUEST_BODY = requestBody
                }
            }
        }
        
        stage('Make API Call') {
            steps {
                script {
                    echo "Making API call..."
                    def response
                    try {
                        response = httpRequest(
                            url: env.SERVICE_URL,
                            httpMode: 'POST',
                            contentType: 'APPLICATION_JSON',
                            customHeaders: [[name: 'X-Correlation-ID', value: env.CORRELATION_ID]],
                            requestBody: env.REQUEST_BODY
                        )
                        echo "API call completed. Response status: ${response.status}"
                        echo "Response body: ${response.content}"
                        
                        if (response.status != 201) {
                            error "API call failed with status code: ${response.status}"
                        }
                    } catch (Exception e) {
                        echo "Exception occurred during API call: ${e.getMessage()}"
                        throw e
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "Job completed successfully"
        }
        failure {
            echo "Job failed. Please check the console output for details."
        }
        aborted {
            echo "Job was aborted"
        }
        always {
            echo "Job finished. Final status: ${currentBuild.result}"
        }
    }
}
