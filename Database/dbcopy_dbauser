DECLARE
   DIRECTORY_PATH VARCHAR2(100) := 'C:/sql';
BEGIN
   FOR s IN (SELECT sequence_name FROM user_sequences) LOOP
      BEGIN
         -- Get sequence DDL
         DECLARE
            ddl CLOB;
            file_handle UTL_FILE.FILE_TYPE;
         BEGIN
            ddl := DBMS_METADATA.get_ddl('SEQUENCE', s.sequence_name);
            file_handle := UTL_FILE.fopen(DIRECTORY_PATH, 'SEQUENCE_' || s.sequence_name || '.sql', 'w');
            UTL_FILE.put_line(file_handle, ddl);
            UTL_FILE.fclose(file_handle);
         EXCEPTION
            WHEN OTHERS THEN
               DBMS_OUTPUT.put_line('Error processing sequence ' || s.sequence_name || ': ' || SQLERRM);
         END;
      END;
   END LOOP;

   FOR syn IN (SELECT synonym_name FROM user_synonyms) LOOP
      BEGIN
         -- Get synonym DDL
         DECLARE
            ddl CLOB;
            file_handle UTL_FILE.FILE_TYPE;
         BEGIN
            ddl := DBMS_METADATA.get_ddl('SYNONYM', syn.synonym_name);
            file_handle := UTL_FILE.fopen(DIRECTORY_PATH, 'SYNONYM_' || syn.synonym_name || '.sql', 'w');
            UTL_FILE.put_line(file_handle, ddl);
            UTL_FILE.fclose(file_handle);
         EXCEPTION
            WHEN OTHERS THEN
               DBMS_OUTPUT.put_line('Error processing synonym ' || syn.synonym_name || ': ' || SQLERRM);
         END;
      END;
   END LOOP;

   FOR db_link_rec IN (SELECT db_link FROM user_db_links) LOOP
      BEGIN
         -- Get database link DDL
         DECLARE
            ddl CLOB;
            file_handle UTL_FILE.FILE_TYPE;
         BEGIN
            ddl := DBMS_METADATA.get_ddl('DB_LINK', db_link_rec.db_link);
            file_handle := UTL_FILE.fopen(DIRECTORY_PATH, 'DB_LINK_' || db_link_rec.db_link || '.sql', 'w');
            UTL_FILE.put_line(file_handle, ddl);
            UTL_FILE.fclose(file_handle);
         EXCEPTION
            WHEN OTHERS THEN
               DBMS_OUTPUT.put_line('Error processing database link ' || db_link_rec.db_link || ': ' || SQLERRM);
         END;
      END;
   END LOOP;

   FOR tblspace IN (SELECT tablespace_name FROM user_tablespaces) LOOP
      BEGIN
         -- Get tablespace DDL
         DECLARE
            ddl CLOB;
            file_handle UTL_FILE.FILE_TYPE;
         BEGIN
            ddl := DBMS_METADATA.get_ddl('TABLESPACE', tblspace.tablespace_name);
            file_handle := UTL_FILE.fopen(DIRECTORY_PATH, 'TABLESPACE_' || tblspace.tablespace_name || '.sql', 'w');
            UTL_FILE.put_line(file_handle, ddl);
            UTL_FILE.fclose(file_handle);
         EXCEPTION
            WHEN OTHERS THEN
               DBMS_OUTPUT.put_line('Error processing tablespace ' || tblspace.tablespace_name || ': ' || SQLERRM);
         END;
      END;
   END LOOP;

   FOR table_def IN (SELECT table_name FROM user_tables) LOOP
      BEGIN
         -- Get table DDL
         DECLARE
            ddl CLOB;
            file_handle UTL_FILE.FILE_TYPE;
         BEGIN
            ddl := DBMS_METADATA.get_ddl('TABLE', table_def.table_name);
            file_handle := UTL_FILE.fopen(DIRECTORY_PATH, 'TABLE_' || table_def.table_name || '.sql', 'w');
            UTL_FILE.put_line(file_handle, ddl);
            UTL_FILE.fclose(file_handle);
         EXCEPTION
            WHEN OTHERS THEN
               DBMS_OUTPUT.put_line('Error processing table ' || table_def.table_name || ': ' || SQLERRM);
         END;
      END;
   END LOOP;
END;
/

TOAD Script:
SET SERVEROUTPUT ON
DECLARE
  v_sql VARCHAR2(4000);
BEGIN
  FOR cur IN (SELECT table_name FROM user_tables) LOOP
    v_sql := 'SELECT DBMS_METADATA.GET_DDL(''TABLE'', ''' || cur.table_name || ''') FROM DUAL';
    EXECUTE IMMEDIATE v_sql;
  END LOOP;
END;
/

