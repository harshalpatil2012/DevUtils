 `SecurityHeadersFilter` and the associated unit and integration tests. These files set security headers in the HTTP response and include logging for various HTTP headers:

**SecurityHeadersFilter:**

```java
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import reactor.core.publisher.Mono;

@Component
@Order(1)
public class SecurityHeadersFilter implements WebFilter {
    
    private static final Logger logger = LoggerFactory.getLogger(SecurityHeadersFilter.class);

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        logRequestHeaders(exchange);
        
        // Set secure headers in the HTTP response
        exchange.getResponse().getHeaders().set("X-Content-Type-Options", "nosniff");
        exchange.getResponse().getHeaders().set("X-Frame-Options", "DENY");
        exchange.getResponse().getHeaders().set("X-XSS-Protection", "1; mode=block");
        exchange.getResponse().getHeaders().set("Strict-Transport-Security", "max-age=31536000; includeSubDomains");
        exchange.getResponse().getHeaders().set("Cache-Control", "no-store, no-cache, must-revalidate, max-age=0");
        exchange.getResponse().getHeaders().set("Referrer-Policy", "same-origin");
        
        return chain.filter(exchange);
    }
    
    private void logRequestHeaders(ServerWebExchange exchange) {
        logger.info("User-Agent: " + exchange.getRequest().getHeaders().getFirst("User-Agent"));
        logger.info("Referer: " + exchange.getRequest().getHeaders().getFirst("Referer"));
        logger.info("Accept-Language: " + exchange.getRequest().getHeaders().getFirst("Accept-Language"));
        logger.info("X-Forwarded-For: " + exchange.getRequest().getHeaders().getFirst("X-Forwarded-For"));
    }
}
```

**SecurityHeadersFilter Unit Tests:**

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.mock.web.MockFilterChain;
import org.springframework.mock.web.MockFilterConfig;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

public class SecurityHeadersFilterTest {

    private SecurityHeadersFilter filter;
    private MockFilterConfig filterConfig;
    private MockHttpServletRequest request;
    private MockHttpServletResponse response;

    @BeforeEach
    public void setUp() {
        filter = new SecurityHeadersFilter();
        filterConfig = new MockFilterConfig();
        request = new MockHttpServletRequest();
        response = new MockHttpServletResponse();
    }

    @Test
    public void testPositiveScenario() throws Exception {
        filter.init(filterConfig);
        MockFilterChain filterChain = new MockFilterChain();
        
        filter.doFilter(request, response, filterChain);

        // Verify that the secure headers are set in the HTTP response as expected
        Mockito.verify(response).setHeader("X-Content-Type-Options", "nosniff");
        Mockito.verify(response).setHeader("X-Frame-Options", "DENY");
        Mockito.verify(response).setHeader("X-XSS-Protection", "1; mode=block");
        Mockito.verify(response).setHeader("Strict-Transport-Security", "max-age=31536000; includeSubDomains");
        Mockito.verify(response).setHeader("Cache-Control", "no-store, no-cache, must-revalidate, max-age=0");
        Mockito.verify(response).setHeader("Referrer-Policy", "same-origin");

        // Verify that the filter chain continues
        Mockito.verify(filterChain).doFilter(request, response);
    }

    @Test
    public void testCustomCacheControlHeader() throws Exception {
        filter.init(filterConfig);
        MockFilterChain filterChain = new MockFilterChain();
        
        // Simulate a scenario where you customize the Cache-Control header in the HTTP response
        // Set up your request and response objects accordingly.

        filter.doFilter(request, response, filterChain);

        // Verify that the Cache-Control header is set in the HTTP response as expected in this custom scenario
        Mockito.verify(response).setHeader("Cache-Control", "custom-cache-settings");
    }
}
```

**SecurityHeadersFilter Integration Test using `WebClient`:**

```java
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class SecurityHeadersFilterIntegrationTest {

    @LocalServerPort
    private int port;

    private final TestRestTemplate restTemplate = new TestRestTemplate();

    @Test
    public void testPositiveScenario() {
        ResponseEntity<String> response = restTemplate.getForEntity("http://localhost:" + port + "/your-endpoint", String.class);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertTrue(response.getHeaders().containsKey("X-Content-Type-Options"));
        assertTrue(response.getHeaders().containsKey("X-Frame-Options"));
        assertTrue(response.getHeaders().containsKey("X-XSS-Protection"));
        assertTrue(response.getHeaders().containsKey("Strict-Transport-Security"));
        assertTrue(response.getHeaders().containsKey("Cache-Control"));
        assertTrue(response.getHeaders().containsKey("Referrer-Policy"));
    }

    @Test
    public void testCustomCacheControlHeader() {
        ResponseEntity<String> response = restTemplate.getForEntity("http://localhost:" + port + "/your-endpoint", String.class);

        assertEquals("custom-cache-settings", response.getHeaders().getFirst("Cache-Control"));
    }
}
```

These consolidated files provide a complete setup for the `SecurityHeadersFilter`, including unit tests and integration tests. Please adapt the URLs, header values, and test cases as per specific application requirements.


build.gradle

Gradle
plugins {
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'war'
}

group 'com.example'
version '1.0-SNAPSHOT'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
}

bootJar {
    mainClassName = 'com.example.MyApplication'
}

task war(type: War) {
    archiveBaseName = 'my-app'
}

task runWar(dependsOn: war) {
    startParameter = '--spring.profiles.active=war'
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.springframework.boot.loader.WarLauncher'
}
Use code with caution. Learn more
README.md

Markdown
## Getting Started

This project is a Spring Boot application that can be run in standalone, bootjar, and war format.

To run the application in standalone mode, simply run the following command:

Use code with caution. Learn more
gradle run


To build a bootjar, run the following command:

gradle bootJar


The bootjar will be created in the `build/libs` directory.

To build a war file, run the following command:

gradle war


The war file will be created in the `build/libs` directory.

To run the war file, run the following command:

gradle runWar

This will start the application in a Tomcat server.

You can also deploy the war file to an existing Tomcat server by copying it to the webapps directory.

Gradle Tasks
The following Gradle tasks are available for this project:

run: Runs the application in standalone mode.
bootJar: Builds a bootjar file.
war: Builds a war file.
runWar: Runs the war file in a Tomcat server.
Environment Variables
The following environment variables can be used to configure the application:

SPRING_PROFILES_ACTIVE: Activates the specified Spring profiles.
Example Usage
To run the application in standalone mode, simply run the following command:

gradle run


This will start the application on port 8080.

To build a bootjar, run the following command:

gradle bootJar

This will create a bootjar file in the build/libs directory. The bootjar file can then be executed like any other JAR file.

To build a war file, run the following command:

gradle war

This will create a war file in the build/libs directory. The war file can then be deployed to a Tomcat server.

To run the war file in a Tomcat server, run the following command:

gradle runWar

This will start the application in the Tomcat server on port 8080.

@Configuration
public class AppConfig {

    @Bean
    public ObjectMapper objectMapper() {
        return new ObjectMapper();
    }
}

Private final ObjectMapper objectMapper;

    @Autowired
    public YourService(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }





