import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.HandlerExceptionResolver;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

import java.util.List;

@Configuration
@EnableWebMvc
public class WebConfig extends WebMvcConfigurerAdapter {

    @Bean
    public HandlerExceptionResolver globalExceptionHandler() {
        return new GlobalExceptionHandler();
    }

    @Override
    public void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {
        exceptionResolvers.add(globalExceptionHandler());
    }
}

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.servlet.HandlerExceptionResolver;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class GlobalExceptionHandler implements HandlerExceptionResolver {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    @Override
    public ErrorResponse resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {
        // Log the exception
        logException(ex);

       ErrorResponse populated error
        return modelAndView;
    }

    private void logException(Exception ex) {
        // Log the exception details
        // You can use a logging framework like SLF4J, Log4j, or java.util.logging
        // Example using SLF4J:
        logger.error("Exception during processing request", ex);
    }
}
